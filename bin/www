#!/usr/bin/env node

// Express can launch a www executable to handle certain tasks.
// www goes in bin (sometimes .bin to keep it hidden)

// This way, we can set certain properties here
// rather than having them take up space in server.js.
const debug = require("debug")("express-example");

// we bring in the app we exported from server.js
const app = require("../server");

// we bring in the models we exported with index.js
const db = require("../models");

// db.connect({
//   host: process.env.DB_HOST,
//   username: process.env.DB_USER,
//   password: process.env.DB_PASS
// })

// we set the port of the app
app.set("port", process.env.PORT || 3000);
// In development, you may need to drop existing tables and re-sync database. Just use force: true as following code:

async function sync1 (){
  await db.kiamaterial.sync();
  await db.kiaandsapmaterial.sync();
  await db.timecontrol.sync();
  await db.dailyproductionreport.sync();
}

sync1().then((val) => {
  async () =>await db.kiamaterial.sync();
  
  console.log(val);
  // we sync the models with our db
  db.sequelize.sync().then(() => {  // it deletes all data..    // sync({}) != sync()
    // set our app to listen to the port we set above
    const server = app.listen(app.get("port"), () =>
      debug("Express server listening on port " + server.address().port)
    );
  });
}).catch(v=>console.log(v));

