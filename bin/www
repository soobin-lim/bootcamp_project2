#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../server");
const debug = require("debug")("express-example");
var http = require('http');

/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// In development, you may need to drop existing tables and re-sync database. Just use force: true as following code:

// async function sync1 (){
//   await db.kiamaterial.sync();
//   await db.kiaandsapmaterial.sync();
//   await db.timecontrol.sync();
//   await db.dailyproductionreport.sync();
// }

// sync1().then(() => {
  // db.sequelize.sync().then(() => {  // it deletes all data..    // sync({}) != sync()
  //   // set our app to listen to the port we set above
  //   const server = app.listen(app.get("port"), () =>
  //     debug("Express server listening on port " + server.address().port)
  //   );
  // });
  

// }).catch(v=>console.log(v));

